import { useAuth } from '../contexts/AuthContext';
import { Alert } from 'react-native';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';

export function useLogout() {
  const { logout } = useAuth();

  const handleLogout = () => {
    Alert.alert(
      'D√©connexion',
      '√ätes-vous s√ªr de vouloir vous d√©connecter ?',
      [
        {
          text: 'Annuler',
          style: 'cancel',
        },
        {
          text: 'Se d√©connecter',
          style: 'destructive',
          onPress: async () => {
            try {
              console.log('üö™ D√©but de la d√©connexion...');
              
              // 1. Appeler la fonction logout du contexte
              await logout();
              
              // 2. Nettoyage manuel de s√©curit√©
              await AsyncStorage.multiRemove([
                'authToken', 
                'userToken', 
                'accessToken', 
                'refreshToken',
                'user', 
                'userProfile', 
                'authState'
              ]);
              
              // 3. Redirection forc√©e
              console.log('üîÑ Redirection forc√©e vers login...');
              router.replace('/(auth)/login');
              
              console.log('‚úÖ D√©connexion r√©ussie');
              
            } catch (error) {
              console.error('‚ùå Erreur lors de la d√©connexion:', error);
              
              try {
                await AsyncStorage.clear();
                router.replace('/(auth)/login');
                console.log('üîß D√©connexion forc√©e apr√®s erreur');
              } catch (forceError) {
                console.error('‚ùå Erreur lors de la d√©connexion forc√©e:', forceError);
                Alert.alert(
                  'Erreur Critique',
                  'Impossible de se d√©connecter. Red√©marrez l\'application.',
                  [
                    { 
                      text: 'Red√©marrer', 
                      onPress: () => {
                        // Tentative de redirection d'urgence
                        router.replace('/(auth)/login');
                      }
                    }
                  ]
                );
              }
            }
          },
        },
      ],
      { cancelable: true }
    );
  };

  const forceLogout = async () => {
    try {
      console.log('üö® D√©connexion forc√©e d\'urgence...');
      
      // Nettoyer tout le stockage
      await AsyncStorage.clear();
      
      // Appeler logout du contexte (ne pas attendre en cas d'erreur)
      try {
        await logout();
      } catch (contextError) {
        console.warn('‚ö†Ô∏è Erreur contexte ignor√©e lors du logout forc√©:', contextError);
      }
      
      // Redirection forc√©e
      router.replace('/(auth)/login');
      
      console.log('‚úÖ D√©connexion forc√©e r√©ussie');
      
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion forc√©e:', error);
      // Derni√®re tentative
      router.replace('/(auth)/login');
    }
  };

  return { 
    handleLogout, 
    forceLogout
  };
}
"""
Commande Django pour cr√©er des cat√©gories par d√©faut
Usage: python manage.py create_default_categories --restaurant-id=<uuid>
"""

from django.core.management.base import BaseCommand
from django.core.exceptions import ObjectDoesNotExist
from api.models import Restaurant, MenuCategory, MenuSubCategory


class Command(BaseCommand):
    help = 'Cr√©e des cat√©gories et sous-cat√©gories par d√©faut pour un restaurant'

    def add_arguments(self, parser):
        parser.add_argument(
            '--restaurant-id',
            type=str,
            required=True,
            help='ID du restaurant pour lequel cr√©er les cat√©gories'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer la cr√©ation m√™me si des cat√©gories existent d√©j√†'
        )

    def handle(self, *args, **options):
        restaurant_id = options['restaurant_id']
        force = options['force']

        try:
            restaurant = Restaurant.objects.get(id=restaurant_id)
        except ObjectDoesNotExist:
            self.stdout.write(
                self.style.ERROR(f'Restaurant avec l\'ID {restaurant_id} non trouv√©')
            )
            return

        # V√©rifier si des cat√©gories existent d√©j√†
        if not force and restaurant.menu_categories.exists():
            self.stdout.write(
                self.style.WARNING(
                    f'Le restaurant {restaurant.name} a d√©j√† des cat√©gories. '
                    'Utilisez --force pour les recr√©er.'
                )
            )
            return

        # Supprimer les cat√©gories existantes si --force
        if force:
            restaurant.menu_categories.all().delete()
            self.stdout.write(
                self.style.WARNING('Cat√©gories existantes supprim√©es')
            )

        # D√©finition des cat√©gories par d√©faut
        default_categories = [
            {
                'name': 'Entr√©es',
                'description': 'Hors d\'≈ìuvres et amuse-bouches',
                'icon': 'ü•ó',
                'color': '#1E2A78',
                'order': 1,
                'subcategories': [
                    {'name': 'Salades', 'description': 'Salades fra√Æches et vari√©es'},
                    {'name': 'Soupes', 'description': 'Soupes chaudes et velout√©s'},
                    {'name': 'Charcuterie', 'description': 'Charcuteries et terrines'},
                ]
            },
            {
                'name': 'Plats principaux',
                'description': 'Nos sp√©cialit√©s culinaires',
                'icon': 'üçΩÔ∏è',
                'color': '#D4AF37',
                'order': 2,
                'subcategories': [
                    {'name': 'Terre', 'description': 'Viandes et sp√©cialit√©s terrestres'},
                    {'name': 'Mer', 'description': 'Poissons et fruits de mer'},
                    {'name': 'V√©g√©tarien', 'description': 'Plats v√©g√©tariens'},
                ]
            },
            {
                'name': 'Desserts',
                'description': 'Douceurs et gourmandises',
                'icon': 'üç∞',
                'color': '#10B981',
                'order': 3,
                'subcategories': [
                    {'name': 'P√¢tisseries', 'description': 'G√¢teaux et p√¢tisseries'},
                    {'name': 'Glaces', 'description': 'Glaces et sorbets'},
                    {'name': 'Fruits', 'description': 'Desserts aux fruits'},
                ]
            },
            {
                'name': 'Boissons',
                'description': 'Rafra√Æchissements et boissons',
                'icon': 'ü•§',
                'color': '#F59E0B',
                'order': 4,
                'subcategories': [
                    {'name': 'Chaudes', 'description': 'Caf√©, th√©, chocolat chaud'},
                    {'name': 'Froides', 'description': 'Sodas, jus, eaux'},
                    {'name': 'Alcoolis√©es', 'description': 'Vins, bi√®res, cocktails'},
                ]
            }
        ]

        created_count = 0
        subcategory_count = 0

        # Cr√©er les cat√©gories et sous-cat√©gories
        for cat_data in default_categories:
            subcategories_data = cat_data.pop('subcategories', [])
            
            category = MenuCategory.objects.create(
                restaurant=restaurant,
                **cat_data
            )
            created_count += 1
            
            # Cr√©er les sous-cat√©gories
            for i, subcat_data in enumerate(subcategories_data):
                MenuSubCategory.objects.create(
                    category=category,
                    order=i + 1,
                    **subcat_data
                )
                subcategory_count += 1
            
            self.stdout.write(
                f'‚úÖ Cat√©gorie "{category.name}" cr√©√©e avec '
                f'{len(subcategories_data)} sous-cat√©gories'
            )

        self.stdout.write(
            self.style.SUCCESS(
                f'\nüéâ Cr√©ation termin√©e !\n'
                f'   Restaurant: {restaurant.name}\n'
                f'   Cat√©gories cr√©√©es: {created_count}\n'
                f'   Sous-cat√©gories cr√©√©es: {subcategory_count}'
            )
        )